{"alert_action_builder": {"modular_alerts": [{"description": "This action allows to create a new alert in TheHive", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAADb0lEQVRYhbWWT0gUURzHLVbRg2K76/6jQxBeOnSY3VVc1N3cfZgQVKcIvHQQw4sUCR46dAmPUR4EIZAggiIRPFhQHSpr/8xCZkTaHyuQtnFmVp3decdvB5ldx915M+Nuhy8M8977/T7v9+e910ApRS0qKjko4goUcQVFJVeTLUopGuwuUFUF4sowhDRhSlwZhlrc/b9AQvaiKUiFsufrD1TIr9kHOaCC/Lk+QPmNmZphNOW/36sNaHdzsW4wmnY3Fw8HpBZ36g6jSS2I9oFYBrcyBP5AkKmtDBvKFpD48QrTmNfDIZdMGI7nkgl4PRx7Ux8uWwcyC3mHiTOrcywBSZ/GmUaONHGldMzP9GFpLloaW5qL4tHd3lJajzazoaRP4+ZAQto4FVKW4JhX78Tt5qp+C2kCl4+DlGVFKWEFyNiA28VB4vX/JsciSD6N4e3jGCbHIvoN8ARtrewoMYHy3+4YLpSzBI0tlcavj/SUOuvC2a6KcUczB5kRJXn9tjGQkBowXOj3Bat2ltPFlYA8vkrgrczeWsMopQYYQIz68Xirt/raizgcDg4OB4flJ2cqxkWewBVgpS3BAmJ0BE/Q3G7eygfV1MRO2cE6sgwkpAk8HUGdcTlL0HmynI7jJ/QntMQTtDjtnUe2gIQ0QVPbnoOhRBj+QBDtrrLDnnAI/kAQPcEQhDTBqc6QaXRqBhLSBG5PuZB/vY7j5cMonj/ox+a7ROm/s8N6ehlAxl2myeEow/j8ld3j85fHGxutQMUZQJlB5uLUfEx3o8d7w9jKEIROhxDt3vu+OBTWzXk2128CNGgMtP3zPruovZzOmcgTfH0VR2YhhsxCDL/fxCEeeJp4q5xN+5X/MX34q2O/I+0QlHi9hDSB06MHt1o/1YFSceNidpcdTYz2QOL3oqapw8tB5AlujEZK89ys4k7FzYHk9Snmji6d68b0rV7TYr02GsFgNMx8OcrrU/V5oGnq69IXsD8QxECk8oK1mi5DIPnLTUsGq72tRZO3tCbp84R1IDtR+pMkaHVyaHVzyCWtrTGKDhNIVQuWjduVWtyxD0QpRUFerTtMQV419GcKRCmFIryvG4wiLDN9WQKilEJVhNrTpPw19WMZSJO4etU2iPhxxLJ920CUUlBVxfbGLNgvgwFsb8yCqqo924cC+s/6B63ABNZM3CvbAAAAAElFTkSuQmCC", "short_name": "thehive_create_a_new_alert", "label": "TheHive - Create a new alert", "parameters": [{"format_type": "text", "required": true, "name": "thehive_instance_id", "label": "TheHive instance ID", "default_value": "", "help_string": "Indicate which instance to use (Set the \"id\" provided under \"Instances\")", "type": "", "value": "acc1d81f"}, {"format_type": "radio", "required": false, "name": "alert_mode", "label": "Alert mode", "default_value": "es_mode", "help_string": "ES notable mode: 1 alert in thehive per row\nAlert action mode: 1 or several grouped alerts (with optional field \"Unique ID\")", "possible_values": {"ES notable mode": "es_mode", "Alert action mode": "regular_mode"}, "type": "", "value": "es_mode"}, {"format_type": "text", "required": false, "name": "unique_id_field", "label": "Unique ID field", "default_value": "", "help_string": "A field name that contains a unique identifier specific to the source event.", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "case_template", "label": "Case Template", "default_value": "", "help_string": "The case template to use for imported alerts.", "type": "", "value": ""}, {"format_type": "text", "required": false, "name": "type", "label": "Type", "default_value": "alert", "help_string": "The alert type. Defaults to \"alert\".", "type": "", "value": "alert"}, {"format_type": "text", "required": false, "name": "source", "label": "Source", "default_value": "splunk", "help_string": "The alert source. Defaults to \"splunk\".", "type": "", "value": "splunk"}, {"format_type": "text", "required": false, "name": "timestamp_field", "label": "Timestamp field", "default_value": "", "help_string": "A field name that contains a valid timestamp. if not provided, default to now()", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "title", "label": "Title", "default_value": "$name$", "help_string": "The title to use for created alerts. IMPORTANT you can specify a field name that contains the title text.", "type": "", "value": "$name$"}, {"format_type": "text", "required": false, "name": "description", "label": "Description", "default_value": "Create an alert entry in TheHive with all fields attached as observable", "help_string": "The description to send with the alert. IMPORTANT You can specify a field name that contains the description text.", "type": "", "value": "Create an alert entry in TheHive with all fields attached as observable"}, {"format_type": "text", "required": false, "name": "tags", "label": "Tags", "default_value": "", "help_string": "Use single comma-separated string without quotes for multiple tags (ex. \"badIP,spam\").", "type": "", "value": ""}, {"format_type": "dropdownlist", "required": true, "name": "scope", "label": "Scope", "default_value": "0", "help_string": "Select the scope for result fields. Default is all fields.", "possible_values": {"Include only listed fields in thehive_datatypes.csv": "0", "Include all fields (default datatype is 'other')": "1"}, "type": "", "value": "0"}, {"format_type": "dropdownlist", "required": true, "name": "severity", "label": "Severity", "default_value": "3", "help_string": "Select the severity of the created alert. Defaults is High", "possible_values": {"High": "3", "Medium": "2", "Low": "1"}, "type": "", "value": "3"}, {"format_type": "dropdownlist", "required": true, "name": "tlp_", "label": "TLP:", "default_value": "3", "help_string": "Select the TLP level of the created alert. Default is TLP:AMBER", "possible_values": {"RED": "4", "AMBER": "3", "GREEN": "2", "WHITE": "1"}, "type": "", "value": "3"}, {"format_type": "dropdownlist", "required": true, "name": "pap_", "label": "PAP:", "default_value": "3", "help_string": "Permissible Action Protocol. Default to PAP:AMBER", "possible_values": {"RED": "4", "AMBER": "3", "GREEN": "2", "WHITE": "1"}, "type": "", "value": "3"}], "code": "# encoding = utf-8\n#!/usr/bin/env python\n# Generate TheHive alerts\n#\n# Author: Alexandre Demeyer <letmer00t@gmail.com>\n# Inspired by: Remi Seguy <remg427@gmail.com>\n#\n# Copyright: LGPLv3 (https://www.gnu.org/licenses/lgpl-3.0.txt)\n# Feel free to use the code, but please share the changes you've made\n\nimport csv\nimport gzip\nimport hashlib\nimport os\nimport re\nimport time\nfrom thehive import TheHive, create_thehive_instance\nfrom thehive4py.models import Alert\n\n__author__ = \"Alexandre Demeyer, Remi Seguy\"\n__license__ = \"LGPLv3\"\n__version__ = \"2.0.0\"\n__maintainer__ = \"Alexandre Demeyer\"\n__email__ = \"letmer00t@gmail.com\"\n\n# All available data types\nOBSERVABLE_TLP = {\n    \"W\": 0,\n    \"G\": 1,\n    \"A\": 2,\n    \"R\": 3,\n    \"0\": \"TLP:WHITE\",\n    \"1\": \"TLP:GREEN\",\n    \"2\": \"TLP:AMBER\",\n    \"3\": \"TLP:RED\"\n}\n\n# All available data types\ndataTypeList = [\n    \"domain\",\n    \"file\",\n    \"filename\",\n    \"fqdn\",\n    \"hash\",\n    \"ip\",\n    \"mail\",\n    \"mail_subject\",\n    \"other\",\n    \"regexp\",\n    \"registry\",\n    \"uri_path\",\n    \"url\",\n    \"user-agent\"\n]\n\n\ndef create_datatype_lookup(helper, app_name):\n    \"\"\" This function is used to create a datatype lookup if it doesn't exist \"\"\"\n\n    # if it does not exist, create thehive_datatypes.csv\n    _SPLUNK_PATH = os.environ['SPLUNK_HOME']\n    directory = os.path.join(_SPLUNK_PATH, 'etc', 'apps', app_name, 'lookups')\n    th_dt_filename = os.path.join(directory, 'thehive_datatypes.csv')\n    helper.log_debug(\"[CAA-THCA-1] Directory found: \" + str(directory))\n\n    if not os.path.exists(th_dt_filename):\n        # file th_dt_filename.csv doesn't exist. Create the file\n        observables = list()\n        observables.append(['field_name', 'field_type', 'datatype', 'regex', 'description'])\n        for dt in dataTypeList:\n            observables.append([dt, 'artifact', dt, '', ''])\n        try:\n            if not os.path.exists(directory):\n                os.makedirs(directory)\n            with open(th_dt_filename, 'w') as file_object:\n                csv_writer = csv.writer(file_object, delimiter=',')\n                for observable in observables:\n                    csv_writer.writerow(observable)\n        except IOError:\n            helper.log_error(\"[CAA-THCA-5-ERROR] FATAL {} could not be opened in write mode\".format(th_dt_filename))\n\n\ndef get_datatype_dict(helper, app_name):\n    \"\"\" This function is used to recover information from a lookup that contain datatypes \"\"\"\n\n    dataType_dict = dict()\n    _SPLUNK_PATH = os.environ['SPLUNK_HOME']\n    directory = os.path.join(_SPLUNK_PATH, 'etc', 'apps', app_name, 'lookups')\n    th_dt_filename = os.path.join(directory, 'thehive_datatypes.csv')\n    helper.log_debug(\"[CAA-THCA-10] Directory found: \" + str(directory))\n\n    if os.path.exists(th_dt_filename):\n        try:\n            # open the file with gzip lib, start making alerts\n            # can with statements fail gracefully??\n            fh = open(th_dt_filename, \"rt\")\n        except ValueError:\n            # Workaround for Python 2.7 under Windows\n            fh = gzip.open(th_dt_filename, \"r\")\n        if fh is not None:\n            try:\n                csv_reader = csv.DictReader(fh)\n                for row in csv_reader:\n                    if 'field_name' in row and 'field_type' in row:\n                        if row['field_type'] == 'artifact':\n                            dataType_dict[row['field_name']] = row['datatype']\n                helper.log_info(\"[CAA-THCA-15] dataType_dict built from thehive_datatypes.csv\")\n            except IOError:  # file thehive_datatypes.csv not readable\n                helper.log_error('[CAA-THCA-16-ERROR] file {} empty, malformed or not readable'.format(th_dt_filename))\n    else:\n        create_datatype_lookup(helper, app_name)\n    if not dataType_dict:\n        dataType_dict = dict()\n        for dt in dataTypeList:\n            dataType_dict[dt] = dt\n        helper.log_info(\"[CAA-THCA-20] dataType_dict built from inline table\")\n    return dataType_dict\n\n\ndef get_customField_dict(helper, app_name):\n    \"\"\" This function is used to recover information from a lookup that contain custom fields \"\"\"\n\n    customField_dict = dict()\n    _SPLUNK_PATH = os.environ['SPLUNK_HOME']\n    directory = os.path.join(_SPLUNK_PATH, 'etc', 'apps', app_name, 'lookups')\n    th_dt_filename = os.path.join(directory, 'thehive_datatypes.csv')\n    helper.log_debug(\"[CAA-THCA-25] Directory found: \" + str(directory))\n\n    if os.path.exists(th_dt_filename):\n        try:\n            # open the file with gzip lib, start making alerts\n            # can with statements fail gracefully??\n            fh = open(th_dt_filename, \"rt\")\n        except ValueError:\n            # Workaround for Python 2.7 under Windows\n            fh = gzip.open(th_dt_filename, \"r\")\n        if fh is not None:\n            try:\n                csv_reader = csv.DictReader(fh)\n                for row in csv_reader:\n                    if 'field_name' in row and 'field_type' in row:\n                        if row['field_type'] == 'customField':\n                            customField_dict[row['field_name']] = row['datatype']\n                helper.log_info(\"[CAA-THCA-30] customField_dict built from thehive_datatypes.csv\")\n            except IOError:  # file thehive_datatypes.csv not readable\n                helper.log_error('[CAA-THCA-31] file {} absent or not readable'.format(th_dt_filename))\n    else:\n        create_datatype_lookup(helper, app_name)\n    return customField_dict\n\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    cortex_max_jobs = helper.get_global_setting(\"cortex_max_jobs\")\n    helper.log_info(\"cortex_max_jobs={}\".format(cortex_max_jobs))\n    cortex_sort_jobs = helper.get_global_setting(\"cortex_sort_jobs\")\n    helper.log_info(\"cortex_sort_jobs={}\".format(cortex_sort_jobs))\n    thehive_max_cases = helper.get_global_setting(\"thehive_max_cases\")\n    helper.log_info(\"thehive_max_cases={}\".format(thehive_max_cases))\n    thehive_sort_cases = helper.get_global_setting(\"thehive_sort_cases\")\n    helper.log_info(\"thehive_sort_cases={}\".format(thehive_sort_cases))\n    thehive_max_alerts = helper.get_global_setting(\"thehive_max_alerts\")\n    helper.log_info(\"thehive_max_alerts={}\".format(thehive_max_alerts))\n    thehive_sort_alerts = helper.get_global_setting(\"thehive_sort_alerts\")\n    helper.log_info(\"thehive_sort_alerts={}\".format(thehive_sort_alerts))\n    splunk_es_alerts_index = helper.get_global_setting(\"splunk_es_alerts_index\")\n    helper.log_info(\"splunk_es_alerts_index={}\".format(splunk_es_alerts_index))\n\n    # The following example gets the alert action parameters and prints them to the log\n    thehive_instance_id = helper.get_param(\"thehive_instance_id\")\n    helper.log_info(\"thehive_instance_id={}\".format(thehive_instance_id))\n\n    alert_mode = helper.get_param(\"alert_mode\")\n    helper.log_info(\"alert_mode={}\".format(alert_mode))\n\n    unique_id_field = helper.get_param(\"unique_id_field\")\n    helper.log_info(\"unique_id_field={}\".format(unique_id_field))\n\n    case_template = helper.get_param(\"case_template\")\n    helper.log_info(\"case_template={}\".format(case_template))\n\n    type = helper.get_param(\"type\")\n    helper.log_info(\"type={}\".format(type))\n\n    source = helper.get_param(\"source\")\n    helper.log_info(\"source={}\".format(source))\n\n    timestamp_field = helper.get_param(\"timestamp_field\")\n    helper.log_info(\"timestamp_field={}\".format(timestamp_field))\n\n    title = helper.get_param(\"title\")\n    helper.log_info(\"title={}\".format(title))\n\n    description = helper.get_param(\"description\")\n    helper.log_info(\"description={}\".format(description))\n\n    tags = helper.get_param(\"tags\")\n    helper.log_info(\"tags={}\".format(tags))\n\n    scope = helper.get_param(\"scope\")\n    helper.log_info(\"scope={}\".format(scope))\n\n    severity = helper.get_param(\"severity\")\n    helper.log_info(\"severity={}\".format(severity))\n\n    tlp_ = helper.get_param(\"tlp_\")\n    helper.log_info(\"tlp_={}\".format(tlp_))\n\n    pap_ = helper.get_param(\"pap_\")\n    helper.log_info(\"pap_={}\".format(pap_))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n\n    # Set the current LOG level\n    helper.log_info(\"[CAA-THCA-35] LOG level to: \" + helper.log_level)\n    helper.set_log_level(helper.log_level)\n\n    helper.log_info(\"[CAA-THCA-36] Alert action thehive_create_a_new_alert started at {}\".format(time.time()))\n\n    # Get the instance connection and initialize settings\n    instance_id = helper.get_param(\"thehive_instance_id\")\n    helper.log_debug(\"[CAA-THCA-40] TheHive instance found: \" + str(instance_id))\n\n    (thehive, configuration, defaults, logger) = create_thehive_instance(instance_id=instance_id, settings=helper.settings, logger=helper._logger)\n\n    helper.log_debug(\"[CAA-THCA-45] TheHive connection is ready. Processing alert parameters...\")\n\n    # Get alert arguments\n    alert_args = {}\n    # Get string values from alert form\n    alert_args[\"alert_mode\"] = helper.get_param(\"alert_mode\") if helper.get_param(\"alert_mode\") else \"es_mode\" \n    alert_args[\"unique_id_field\"] = helper.get_param(\"unique_id_field\") if helper.get_param(\"unique_id_field\") else \"oneEvent\" \n    alert_args[\"caseTemplate\"] = helper.get_param(\"case_template\") if helper.get_param(\"case_template\") else \"default\"\n    alert_args[\"type\"] = helper.get_param(\"type\") if helper.get_param(\"type\") else \"alert\"\n    alert_args[\"source\"] = helper.get_param(\"source\") if helper.get_param(\"source\") else \"splunk\"\n    if not helper.get_param(\"timestamp_field\"):\n        alert_args['timestamp'] = int(time.time() * 1000)\n    else:\n        alert_args['timestamp'] = helper.get_param(\"timestamp_field\")\n        epoch10 = re.match(\"^[0-9]{10}$\", alert_args['timestamp'])\n        if epoch10 is not None:\n            alert_args['timestamp'] = int(alert_args['timestamp']) * 1000\n\n    alert_args[\"title\"] = helper.get_param(\"title\") if helper.get_param(\"title\") else \"Notable event\"\n    alert_args[\"description\"] = helper.get_param(\"description\").replace(\"\\\\n\",\"\\n\").replace(\"\\\\r\",\"\\r\") if helper.get_param(\"description\") else \"No description provided\"\n    alert_args[\"tags\"] = list(dict.fromkeys(helper.get_param(\"tags\").split(\",\"))) if helper.get_param(\"tags\") else []\n    helper.log_debug(\"[CAA-THCA-50] scope: {} \".format(helper.get_param(\"scope\")))\n    alert_args[\"scope\"] = True if int(helper.get_param(\"scope\")) == 0 else False\n    # Get numeric values from alert form\n    alert_args[\"severity\"] = int(helper.get_param(\"severity\")) if helper.get_param(\"severity\") is not None else 2\n    alert_args[\"tlp\"] = int(helper.get_param(\"tlp\")) if helper.get_param(\"tlp\") is not None else 2\n    alert_args[\"pap\"] = int(helper.get_param(\"pap\")) if helper.get_param(\"pap\") is not None else 2\n    alert_args[\"splunk_es_alerts_index\"] = helper.get_global_setting(\"splunk_es_alerts_index\") if helper.get_global_setting(\"splunk_es_alerts_index\") is not None else \"summary\"\n    helper.log_debug(\"[CAA-THCA-55] Arguments recovered: \" + str(alert_args))\n\n    # Create the alert\n    helper.log_info(\"[CAA-THCA-56] Alert preparation is finished. Creating the alert...\")\n    create_alert(helper, thehive, alert_args)\n    helper.log_info(\"[CAA-THCA-57] Alert creation is done.\")\n    return 0\n\n\ndef extract_field(helper, row, field):\n    \"\"\" This function is used to extract information from a potential field in a row and sanitize it if needed. If the field is not found, use the field name directly as value \"\"\"\n\n    result = field\n    # Check if the given \"field\" is actually a field from the search results\n    if field in row:\n        # A field is found\n        newValue = str(row[field])\n        if newValue not in [None, '']:\n            result = newValue\n    return result\n\n\ndef create_alert(helper, thehive_api, alert_args):\n    \"\"\" This function is used to create the alert using the API, settings and search results \"\"\"\n\n    # iterate through each row, cleaning multivalue fields\n    # and then adding the attributes under same alert key\n    # this builds the dict alerts\n    app_name = \"TA-thehive-cortex\"\n    data_type = get_datatype_dict(helper, app_name)\n    custom_field_type = get_customField_dict(helper, app_name)\n    alert_reference_time = str(int(time.time()))\n    alerts = dict()\n    events = helper.get_events()\n    for row in events:\n        # Initialize values\n        artifacts = []\n        artifactTags = []\n        artifactMessage = ''\n        customFields = dict()\n        alert = dict()\n\n        # define thehive alert unique ID (if duplicated, alert creations fails)\n\n        if alert_args[\"alert_mode\"] == \"es_mode\":\n            if \"_time\" in row:\n                message = row[\"_time\"]\n            else:\n                message = alert_reference_time\n            message = message + str(row)\n            sourceRef = alert_args[\"splunk_es_alerts_index\"] + \"@@\" + hashlib.md5(message.encode('utf-8')).hexdigest()\n        elif alert_args['unique_id_field'] in row:\n            newSource = str(row[alert_args['unique_id_field']])\n            if newSource not in [None, '']:\n                # grabs that field's value and assigns it to our sourceRef\n                sourceRef = newSource\n            else:\n                sourceRef = \"SPK\" + alert_reference_time\n        else:\n            sourceRef = \"SPK\" + alert_reference_time\n\n        # Splunk makes a bunch of dumb empty multivalue fields\n        # replace value by multivalue if required\n        helper.log_debug(\"[CAA-THCA-65] Row before pre-processing: \" + str(row))\n        for key, value in row.items():\n            if not key.startswith(\"__mv_\") and \"__mv_\" + key in row and row[\"__mv_\" + key] not in [None, '']:\n                row[key] = [e[1:len(e) - 1] for e in row[\"__mv_\" + key].split(\";\")]\n        # we filter those out here\n        row = {key: value for key, value in row.items() if not key.startswith(\"__mv_\") and key not in [\"rid\"]}\n        helper.log_debug(\"[CAA-THCA-66] Row after pre-processing: \" + str(row))\n\n        helper.log_debug(\"[CAA-THCA-70] sourceRef: {} \".format(sourceRef))\n\n        if 'th_inline_tags' in row:\n            # grabs that field's value and assigns it to\n            artifactTags = list(str(row.pop(\"th_inline_tags\")).split(\",\"))\n\n        # check if the field th_msg exists and strip it from the row.\n        # The value will be used as message attached to artifacts\n        if 'th_msg' in row:\n            # grabs that field's value and assigns it to\n            artifactMessage = str(row.pop(\"th_msg\"))\n        helper.log_debug(\"[CAA-THCA-75] artifact message: {} \".format(artifactMessage))\n        helper.log_debug(\"[CAA-THCA-76] artifact tags: {} \".format(artifactTags))\n\n        # check if artifacts have been stored for this sourceRef.\n        # If yes, retrieve them to add new ones from this row\n        if sourceRef in alerts:\n            alert = alerts[sourceRef]\n            artifacts = list(alert[\"artifacts\"])\n            customFields = dict(alert['customFields'])\n\n        # check if title contains a field name instead of a string.\n        # if yes, strip it from the row and assign value to title\n        alert[\"title\"] = extract_field(helper, row, alert_args[\"title\"])\n\n        # check if description contains a field name instead of a string.\n        # if yes, strip it from the row and assign value to description\n        alert[\"description\"] = extract_field(helper, row, alert_args[\"description\"])\n\n        # find the field name used for a valid timestamp\n        # and strip it from the row\n\n        if alert_args['timestamp'] in row:\n            newTimestamp = str(int(float(row.pop(alert_args['timestamp']))))\n            helper.log_debug(\"[CAA-THCA-80] new Timestamp from row: {} \".format(newTimestamp))\n            epoch10 = re.match(\"^[0-9]{10}$\", newTimestamp)\n            epoch13 = re.match(\"^[0-9]{13}$\", newTimestamp)\n            if epoch13 is not None:\n                alert['timestamp'] = int(float(newTimestamp))\n            elif epoch10 is not None:\n                alert['timestamp'] = int(float(newTimestamp)) * 1000\n            helper.log_debug(\"[CAA-THCA-85] alert timestamp: {} \".format(alert['timestamp']))\n        else:\n            alert['timestamp'] = alert_args['timestamp']\n\n        # now we take those KV pairs to add to dict\n        for key, value in row.items():\n            cTags = artifactTags[:]\n            if value != \"\":\n                helper.log_debug('[CAA-THCA-90] field to process: {}'.format(key))\n                artifact_key = ''\n                cTLP = ''\n                if ':' in key:\n                    helper.log_debug('[CAA-THCA-91] composite fieldvalue: {}'.format(key))\n                    dType = key.split(':', 1)\n                    key = str(dType[0])\n                    # extract TLP at observable level\n                    # it is on letter W G A or R appended to field name\n                    observable_tlp_check = re.match(\"^(W|G|A|R)$\", str(dType[1]))\n                    if observable_tlp_check is not None:\n                        cTLP = OBSERVABLE_TLP[dType[1]]\n                        cTags.append(OBSERVABLE_TLP[str(cTLP)])\n                    else:\n                        cTags.append(str(dType[1]).replace(\" \", \"_\"))\n                if key in data_type:\n                    helper.log_debug('[CAA-THCA-95] key is an artifact: {} '.format(key))\n                    artifact_key = data_type[key]\n                elif key in custom_field_type:\n                    helper.log_debug('[CAA-THCA-96] key is a custom field: {} '.format(key))\n                    # expected types are `string`, `boolean`, `number` (only TH3), `date`, `integer` (only TH4), `float` (only TH4)\n                    custom_field_check = False\n                    custom_field = dict()\n                    custom_field['order'] = len(customFields)\n                    custom_type = custom_field_type[key]\n                    if custom_type == 'string':\n                        custom_field_check = True\n                        custom_field[custom_type] = str(value)\n                    elif custom_type == 'boolean':\n                        is_True = re.match(\"^(1|y|Y|t|T|true|True)$\", value)\n                        is_False = re.match(\"^(0|n|N|f|F|false|False)$\", value)\n                        if is_True is not None:\n                            custom_field_check = True\n                            custom_field[custom_type] = True\n                        elif is_False is not None:\n                            custom_field_check = True\n                            custom_field[custom_type] = False\n                    elif custom_type == 'number':  # for TheHive3 only\n                        is_integer = re.match(\"^[0-9]+$\", value)\n                        if is_integer is not None:\n                            custom_field_check = True\n                            custom_field[custom_type] = int(value)\n                        else:\n                            try:\n                                number = float(value)\n                                custom_field_check = True\n                                custom_field[custom_type] = number\n                            except ValueError:\n                                pass\n                    elif custom_type == 'integer':  # for TheHive4 only\n                        try:\n                            number = int(value)\n                            custom_field_check = True\n                            custom_field[custom_type] = number\n                        except ValueError:\n                            pass\n                    elif custom_type == 'float':  # for TheHive4 only\n                        try:\n                            number = float(value)\n                            custom_field_check = True\n                            custom_field[custom_type] = number\n                        except ValueError:\n                            pass\n                    elif custom_type == 'date':\n                        epoch10 = re.match(\"^[0-9]{10}$\", value)\n                        epoch13 = re.match(\"^[0-9]{13}$\", value)\n                        if epoch13 is not None:\n                            custom_field_check = True\n                            custom_field[custom_type] = int(value)\n                        elif epoch10 is not None:\n                            custom_field_check = True\n                            custom_field[custom_type] = int(value) * 1000\n                    if custom_field_check is True:\n                        customFields[key] = custom_field\n                elif alert_args['scope'] is False:\n                    helper.log_debug('[CAA-THCA-105] key is added as another artifact (scope is False): {} '.format(key))\n                    artifact_key = 'other'\n\n                if artifact_key not in [None, '']:\n                    helper.log_debug(\"[CAA-THCA-106] Processing artifact key: \" + str(artifact_key) + \" (\" + str(value) + \") (\" + artifactMessage + \")\")\n                    cTags.append('field:' + str(key))\n                    if isinstance(value,list) :  # was a multivalue field\n                        helper.log_debug('[CAA-THCA-107] value is not a simple string: {} '.format(value))\n                        for val in value:\n                            if val != \"\":\n                                artifact = dict(dataType=artifact_key,\n                                                data=str(val),\n                                                message=artifactMessage,\n                                                tags=cTags\n                                                )\n                                if cTLP != '':\n                                    artifact['tlp'] = cTLP\n                                helper.log_debug(\"[CAA-THCA-110] new artifact is {}\".format(artifact))\n                                if artifact not in artifacts:\n                                    artifacts.append(artifact)\n                    else:\n                        artifact = dict(dataType=artifact_key,\n                                        data=str(value),\n                                        message=artifactMessage,\n                                        tags=cTags\n                                        )\n                        if cTLP != '':\n                            artifact['tlp'] = cTLP\n                        if artifact not in artifacts:\n                            artifacts.append(artifact)\n\n        if artifacts:\n            alert['artifacts'] = list(artifacts)\n            alert['customFields'] = customFields\n            alerts[sourceRef] = alert\n            helper.log_debug(\"[CAA-THCA-115] Artifacts found for an alert: \" + str(artifacts))\n        else:\n            helper.log_debug(\"[CAA-THCA-116] No artifact found for an alert: \" + str(alert))\n\n    # actually send the request to create the alert; fail gracefully\n    for srcRef in alerts.keys():\n\n        # Create the Alert object\n        alert = Alert(\n            title=alerts[srcRef]['title'],\n            date=int(alerts[srcRef]['timestamp']),\n            description=alerts[srcRef]['description'],\n            tags=alert_args['tags'],\n            severity=alert_args['severity'],\n            tlp=alert_args['tlp'],\n            pap=alert_args['pap'],\n            type=alert_args['type'],\n            artifacts=alerts[srcRef]['artifacts'],\n            customFields=alerts[srcRef]['customFields'],\n            source=alert_args['source'],\n            caseTemplate=alert_args['caseTemplate'],\n            sourceRef=srcRef\n        )\n\n        helper.log_debug(\"[CAA-THCA-120] Processing alert: \" + alert.jsonify())\n        # Get API and create the alert\n        response = thehive_api.create_alert(alert)\n\n        if response.status_code in (200, 201, 204):\n            # log response status\n            helper.log_info(\n                \"[CAA-THCA-125] INFO theHive alert is successfully created. \"\n                \"url={}, HTTP status={}\".format(thehive_api.url, response.status_code)\n            )\n            alert_creation_response = response.text\n\n        else:\n            # somehow we got a bad response code from thehive\n            helper.log_error(\n                \"[CAA-THCA-126] ERROR theHive alert creation has failed. \"\n                \"url={}, data={}, HTTP Error={}, content={}\"\n                .format(thehive_api.url, alert.jsonify(), response.status_code, response.text)\n            )\n", "uuid": "a3b8477cec794570bd57c2c0d4760a17", "active_response": {"technology": [{"product": "TA TheHive", "version": ["2.1"], "vendor": "TheHive"}], "supports_adhoc": true, "task": ["scan"], "drilldown_uri": "", "category": ["Information Gathering"], "subject": ["threat.artifact"]}}, {"description": "This action allows to run a new job in Cortex", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAC0ElEQVRYhe2WPWgUQRSAH0SMQvAHQRDFIIIIFoKQwkI47OIRzMxkGxULa4Na2lkIghZBBEUQCwsJVygWBoTI3L735khCJFoEhUAKBf8QJEqI0SRrcXfe7GZnM5tLSMA8eMW+mX3vez87swAbsgoSaN1W0LptrTkAAEASRrYKovMAAJLxeXJNEkaK8daKAgjCKUkYSebLEvFZWlBJ9EgxXkxfqyoAgGK81xRMmlNXwCLRTsk0G7Mb0xF7RizavpoGksxnJOFcVhXyPvuCvHFVI6tKErFfEn5x7RXl8vE0f0vA0JOswIJwGgBAGHPSsb6QAT+vEO8kbDNebcqshIcKwoWgUtnrU2EnjKDwc2NesF8STi4XKCOhWQAAieHcklC55mV5MNYXiL25gf45Z+5Pdco4oZjGEoPdaw92XYPR0e1LJRGToFRqyXjhU3K/QrwpCKckhj8FhberLaejrsSC4eEDkvC9O0Z4rVEZU+6QhFEP89lmBtlqV/pZNaT3BaVSi8TwW3JNEL6zW/VKEkYFrTc5neXQzqGhbZL5qnsP3ZeIx/51p1LZKgm/20Af7AwV8ylBdON0uXyiUcWX7ZJxxBsMw5Gq7/Ctb2UtoOphmNCZFNtkLYGniwFwT1ogQTjaSMoUc0D5t0QZeiyIrtu2Lub9CZBpj1nLAGKad73cbczBTECmBz4BY2qwKIgOOYFcDgTzFZ/+5waqaUHrNkXhmDJ4bhEQAIAYHNyliC4p5iM+7ewcGGhNXgM1/dg5MdHqA5UKkiVOZ4x3a3de6rogXLD9FLTeUtfcEAmg376tqoH8AQDoHtM7BOGvpivigEoEjX9ldQ2iqEUa057Roq8rAiTCMP5DxvRaYPjCsj0EWPxbsSrViYEZs7uHua+Huc+2+5ziXVofXnGgLHHN2qpUJo8E4+Ob1w1MXSThj3UFpIgurCsggNrtbkxxrTk25P+Sv2yHnII3QCH9AAAAAElFTkSuQmCC", "label": "Cortex - Run a new job", "short_name": "cortex_run_a_new_job", "active_response": {"technology": [{"vendor": "Cortex", "product": "TA Cortex", "version": ["2.1"]}], "supports_adhoc": false, "category": ["Information Gathering"], "task": ["scan"], "subject": ["threat.artifact"]}, "parameters": [{"format_type": "text", "required": true, "name": "cortex_instance_id", "label": "Cortex Instance ID", "default_value": "", "help_string": "Indicate which instance to use (Set the \"id\" provided under \"Instances\")", "type": "", "value": ""}, {"format_type": "text", "required": true, "name": "data_field_name", "label": "Data field name", "default_value": "data", "help_string": "Name of the field to use as \"data\"", "type": "", "value": "data"}, {"format_type": "text", "required": true, "name": "datatype_field_name", "label": "Datatype field name", "default_value": "datatype", "help_string": "Name of the field to use as \"datatype\"", "type": "", "value": "datatype"}, {"format_type": "text", "required": true, "name": "analyzers", "label": "Analyzers", "default_value": "", "help_string": "Indicate which analyzers to use by specifying the name of all analyzers separated by \";\"", "type": "", "value": ""}, {"format_type": "dropdownlist", "required": true, "name": "tlp", "label": "TLP:", "default_value": "3", "help_string": "Select the TLP level of the created job. Default is TLP:AMBER", "possible_values": {"RED": "4", "AMBER": "3", "GREEN": "2", "WHITE": "1"}, "type": "", "value": "3"}, {"format_type": "dropdownlist", "required": true, "name": "pap", "label": "PAP:", "default_value": "3", "help_string": "Permissible Action Protocol. Default to PAP:AMBER", "possible_values": {"RED": "4", "AMBER": "3", "GREEN": "2", "WHITE": "1"}, "type": "", "value": "3"}], "code": "# encoding = utf-8\n#!/usr/bin/env python\n# Generate Cortex jobs\n#\n# Author: Alexandre Demeyer <letmer00t@gmail.com>\n# Inspired by: Remi Seguy <remg427@gmail.com>\n#\n# Copyright: LGPLv3 (https://www.gnu.org/licenses/lgpl-3.0.txt)\n# Feel free to use the code, but please share the changes you've made\n\nimport sys\nimport time\nfrom cortex import Cortex, create_cortex_instance\n\n__author__ = \"Alexandre Demeyer\"\n__license__ = \"LGPLv3\"\n__version__ = \"2.0.0\"\n__maintainer__ = \"Alexandre Demeyer\"\n__email__ = \"letmer00t@gmail.com\"\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    cortex_max_jobs = helper.get_global_setting(\"cortex_max_jobs\")\n    helper.log_info(\"cortex_max_jobs={}\".format(cortex_max_jobs))\n    cortex_sort_jobs = helper.get_global_setting(\"cortex_sort_jobs\")\n    helper.log_info(\"cortex_sort_jobs={}\".format(cortex_sort_jobs))\n    thehive_max_cases = helper.get_global_setting(\"thehive_max_cases\")\n    helper.log_info(\"thehive_max_cases={}\".format(thehive_max_cases))\n    thehive_sort_cases = helper.get_global_setting(\"thehive_sort_cases\")\n    helper.log_info(\"thehive_sort_cases={}\".format(thehive_sort_cases))\n    thehive_max_alerts = helper.get_global_setting(\"thehive_max_alerts\")\n    helper.log_info(\"thehive_max_alerts={}\".format(thehive_max_alerts))\n    thehive_sort_alerts = helper.get_global_setting(\"thehive_sort_alerts\")\n    helper.log_info(\"thehive_sort_alerts={}\".format(thehive_sort_alerts))\n    splunk_es_alerts_index = helper.get_global_setting(\"splunk_es_alerts_index\")\n    helper.log_info(\"splunk_es_alerts_index={}\".format(splunk_es_alerts_index))\n\n    # The following example gets the alert action parameters and prints them to the log\n    cortex_instance_id = helper.get_param(\"cortex_instance_id\")\n    helper.log_info(\"cortex_instance_id={}\".format(cortex_instance_id))\n\n    data_field_name = helper.get_param(\"data_field_name\")\n    helper.log_info(\"data_field_name={}\".format(data_field_name))\n\n    datatype_field_name = helper.get_param(\"datatype_field_name\")\n    helper.log_info(\"datatype_field_name={}\".format(datatype_field_name))\n\n    analyzers = helper.get_param(\"analyzers\")\n    helper.log_info(\"analyzers={}\".format(analyzers))\n\n    tlp = helper.get_param(\"tlp\")\n    helper.log_info(\"tlp={}\".format(tlp))\n\n    pap = helper.get_param(\"pap\")\n    helper.log_info(\"pap={}\".format(pap))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    # Set the current LOG level\n    helper.log_info(\"[CAA-RNJ-40] LOG level to: \" + helper.log_level)\n    helper.set_log_level(helper.log_level)\n\n    helper.log_info(\"[CAA-RNJ-41] Alert action cortex_run_a_new_job started at {}\".format(time.time()))\n\n    # Get the instance connection and initialize settings\n    instance_id = helper.get_param(\"cortex_instance_id\")\n    helper.log_debug(\"[CAA-RNJ-42] Cortex instance found: \" + str(instance_id))\n\n    (cortex, configuration, defaults, logger) = create_cortex_instance(instance_id=instance_id, settings=helper.settings, logger=helper._logger)\n\n    helper.log_debug(\"[CAA-RNJ-43] Cortex connection is ready. Processing job parameters...\")\n\n    # Get job arguments\n    job_args = {}\n    job_args[\"data\"] = helper.get_param(\"data_field_name\") if helper.get_param(\"data_field_name\") else \"data\"\n    job_args[\"datatype\"] = helper.get_param(\"datatype_field_name\") if helper.get_param(\"datatype_field_name\") else \"datatype\"\n    job_args[\"analyzers\"] = helper.get_param(\"analyzers\") if helper.get_param(\"analyzers\") else None\n    job_args[\"tlp\"] = int(helper.get_param(\"tlp\")) if helper.get_param(\"tlp\") is not None else 2\n    job_args[\"pap\"] = int(helper.get_param(\"pap\")) if helper.get_param(\"pap\") is not None else 2\n\n    helper.log_debug(\"[CAA-RNJ-44] Arguments recovered: \"+str(job_args))\n\n    # Create the job\n    helper.log_info(\"[CAA-RNJ-45] Job preparation is finished. Running the job...\")\n    run_job(helper, cortex, job_args)\n    helper.log_info(\"[CAA-RNJ-46] Job creation is done.\")\n    return 0\n\n\ndef run_job(helper, cortex_api, job_args):\n    \"\"\" This function is used to create a new job using the API, settings and search results \"\"\"\n\n    app_name = \"TA-thehive-cortex\"\n    jobs = dict()\n    analyzers = job_args[\"analyzers\"]\n    tlp = job_args[\"tlp\"]\n    pap = job_args[\"pap\"]\n\n    events = helper.get_events()\n    for row in events:\n        # Initialize values\n        data = None\n        datatype = None\n        # Get values of current row\n        try:\n            data = row[job_args[\"data\"]]\n            datatype = row[job_args[\"datatype\"]]\n        except e as Exception:\n            helper.log_warning(e)\n            sys.exit(1)\n\n        cortex_api.addJob(data,datatype,tlp,pap,analyzers)\n        helper.log_debug(\"[CAA-RNJ-55] Adding a new job\")\n    jobs = cortex_api.runJobs()\n\n    return 0\n", "uuid": "2b92b9126e024e39a952b1a1133acc40"}]}, "basic_builder": {"appname": "TA-thehive-cortex", "friendly_name": "TheHive-Cortex", "version": "2.1.2", "author": "Alexandre Demeyer", "description": "This application is used to interact with a TheHive and/or Cortex platform from Splunk", "theme": "#f2d130", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.0.0", "tab_build_no": "0", "build_no": 15}, "data_input_builder": {"datainputs": []}, "field_extraction_builder": {"cortex:supervisor": {"data_format": "json"}, "thehive:supervisor": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": [], "customized_settings": [{"required": true, "name": "cortex_max_jobs", "label": "Cortex: Max jobs", "default_value": "100", "placeholder": "", "help_string": "Maximum number of jobs returned", "type": "text", "format_type": "text", "value": "100"}, {"required": true, "name": "cortex_sort_jobs", "label": "Cortex: Sort jobs", "default_value": "-createdAt", "placeholder": "", "help_string": "Sort Cortex jobs by", "type": "text", "format_type": "text", "value": "-createdAt"}, {"required": true, "name": "thehive_max_cases", "label": "TheHive: Max cases", "default_value": "100", "placeholder": "", "help_string": "Maximum number of cases returned", "type": "text", "format_type": "text", "value": "100"}, {"required": true, "name": "thehive_sort_cases", "label": "TheHive: Sort cases", "default_value": "-startDate", "placeholder": "", "help_string": "Sort TheHive cases by", "type": "text", "format_type": "text", "value": "-startedAt"}, {"format_type": "text", "required": true, "name": "thehive_max_alerts", "label": "TheHive: Max alerts", "default_value": "100", "help_string": "Maximum number of alerts returned", "internal_name": "", "type": "text", "value": "100"}, {"format_type": "text", "required": true, "name": "thehive_sort_alerts", "label": "TheHive: Sort alerts", "default_value": "-date", "help_string": "Sort TheHive alerts by", "internal_name": "", "type": "text", "value": "-date"}, {"format_type": "text", "required": false, "name": "splunk_es_alerts_index", "label": "Splunk ES: Alerts index", "default_value": "summary", "help_string": "(Only for Adaptive Response in Splunk ES) Specify the index where you want to store alerts", "internal_name": "", "type": "text", "value": "summary"}]}}, "sourcetype_builder": {"thehive:supervisor": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "cortex:supervisor": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}, "thehive:logs": {"metadata": {"event_count": 0, "data_input_name": null, "extractions_count": 0, "cims_count": 0}}}, "validation": {}}